import apiFetch from "@/components/utils/fetchInstance";

// BookingOrder-create
const createBookingOrder = async (BookingOrder : any) => {
  try {
    // For create, exclude id as it will be generated by the server
    const { id, ...createData } = BookingOrder;
    const response = await apiFetch('BookingOrder', {
      method: 'POST',
      headers: {}, 
      body: JSON.stringify(createData),
    }, true);
    return response;
  } catch (error: any) {
    throw error;
  }
};

// BookingOrder-list
const getAllBookingOrder  = async (pageIndex: any = 1, pageSize: any = 10, filters: any = {}) => {
  try {
    let queryParams = `PageIndex=${pageIndex}&PageSize=${pageSize}`;
    if (filters.orderNo) {
      queryParams += `&OrderNo=${filters.orderNo}`;
    }
    const response = await apiFetch(`BookingOrder?${queryParams}`, {
      method: 'GET',
      headers: {}, 
    }, true);
    return response;
  } catch (error: any) {
    throw error;
  }
};

const getAllBookingOrderPositions = async (pageIndex: any = 1, pageSize: any = 10) => {
  try {
    const response = await apiFetch(`BookingOrderPositions?PageIndex=${pageIndex}&PageSize=${pageSize}`, {
      method: 'GET',
      headers: {}, 
    }, true);
    return response;
  } catch (error: any) {
    throw error;
  }
};

// get-single-BookingOrder-data
const getSingleBookingOrder  = async (id: string) => {
  try {
    const response = await apiFetch(`BookingOrder/${id}`, {
      method: 'GET',
      headers: {}, 
    }, true);
    return response;
  } catch (error: any) {
    throw error;
  }
};

// BookingOrder-update
// Expects the unique id (primary key) in the URL and the updated object in the body
// Usage: updateBookingOrder(id, updatedBookingOrderObject)
const updateBookingOrder = async (id: string, bookingOrderData: any) => {
  try {
    if(!id) throw new Error('updateBookingOrder: id is required');
    // Ensure the id is included in the body for update operations
    const updatePayload = {
      ...bookingOrderData,
      id: id // Always include the id in the body for updates
    };
    const response = await apiFetch(`BookingOrder`, {
      method: 'PUT',
      headers: {},
      body: JSON.stringify(updatePayload),
    }, true);
    return response;
  } catch (error: any) {
    throw error;
  }
};

// delete-single-BookingOrder-data
const deleteBookingOrder  = async (id: string) => {
  try {
    const response = await apiFetch(`BookingOrder/${id}`, {
      method: 'DELETE',
      headers: {}, 
    }, true);
    return response;
  } catch (error: any) {
    throw error;
  }   
};
const updateBookingOrderStatus = async (BookingOrderStatus: { id: string; status: string }) => {
  try {
    const response = await apiFetch('BookingOrder/status', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ Id: BookingOrderStatus.id, Status: BookingOrderStatus.status }),
    }, true);
    return response;
  } catch (error: any) {
    throw error;
  }
};

// BookingOrder -> Consignments: get consignments for a booking order
const getConsignmentsForBookingOrder = async (bookingOrderId: string, pageIndex: any = 1, pageSize: any = 100, filters: any = {}) => {
  try {
    let queryParams = `PageIndex=${pageIndex}&PageSize=${pageSize}`;
    // allow filtering by biltyNo, receiptNo or other consignment filters if provided
    Object.keys(filters || {}).forEach((k) => {
      if (filters[k] !== undefined && filters[k] !== null) {
        queryParams += `&${encodeURIComponent(k)}=${encodeURIComponent(filters[k])}`;
      }
    });
    const response = await apiFetch(`BookingOrder/${bookingOrderId}/consignments?${queryParams}`, {
      method: 'GET',
      headers: {},
    }, true);
    return response;
  } catch (error: any) {
    throw error;
  }
};

// Add a consignment under a booking order
const addConsignmentToBookingOrder = async (bookingOrderId: string, consignment: any) => {
  try {
    // Ensure bookingOrderId is present in payload as the API expects it in body too
    const payload = { ...consignment, bookingOrderId };
    const response = await apiFetch(`BookingOrder/${bookingOrderId}/consignments`, {
      method: 'POST',
      headers: {},
      body: JSON.stringify(payload),
    }, true);
    return response;
  } catch (error: any) {
    throw error;
  }
};

// Update a consignment under a booking order
const updateConsignmentForBookingOrder = async (bookingOrderId: string, consignmentId: string, consignment: any) => {
  try {
    // Ensure id and bookingOrderId are present in payload
    const payload = { ...consignment, id: consignmentId, bookingOrderId };
    const response = await apiFetch(`BookingOrder/${bookingOrderId}/consignments/${consignmentId}`, {
      method: 'PUT',
      headers: {},
      body: JSON.stringify(payload),
    }, true);
    return response;
  } catch (error: any) {
    throw error;
  }
};

// Delete a consignment under a booking order
const deleteConsignmentFromBookingOrder = async (bookingOrderId: string, consignmentId: string) => {
  try {
    const response = await apiFetch(`BookingOrder/${bookingOrderId}/consignments/${consignmentId}`, {
      method: 'DELETE',
      headers: {},
    }, true);
    return response;
  } catch (error: any) {
    throw error;
  }
};
export {
  createBookingOrder,
  getAllBookingOrder,
  getAllBookingOrderPositions,
  getSingleBookingOrder,
  updateBookingOrder,
  deleteBookingOrder,
  updateBookingOrderStatus,
  // new booking-order consignment helpers
  getConsignmentsForBookingOrder,
  addConsignmentToBookingOrder,
  updateConsignmentForBookingOrder,
  deleteConsignmentFromBookingOrder,
};
